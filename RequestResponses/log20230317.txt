2023-03-17 04:43:09.608 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:43:09 AM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 04:43:10.000 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:43:09 AM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 04:43:10.096 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:43:10 AM
Address = https
Path = /SwaggerCustomize.css
IsSecured = True
RequestBody = 

2023-03-17 04:43:10.131 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:43:10 AM
ResponseBody = 



2023-03-17 04:43:10.820 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:43:10 AM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 04:43:11.511 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:43:11 AM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 04:43:21.901 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:43:21 AM
Address = https
Path = /api/Event/GetAllEvent
IsSecured = True
RequestBody = 

2023-03-17 04:43:25.882 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:43:25 AM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"stringggggggg"
"description":"striiiiiing"
"ticketQuantity":21
"startTime":"2023-03-15T21:21:18.797"
"endTime":"2023-03-15T21:21:18.797"
"isAccepted":false}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"Mariami"
"description":"sindorelabindorela"
"ticketQuantity":22
"startTime":"2023-03-16T08:21:45.173"
"endTime":"2023-03-16T08:21:45.173"
"isAccepted":false}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 16:55:27.593 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:55:27 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 16:55:28.343 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:55:28 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 16:55:28.555 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:55:28 PM
Address = https
Path = /SwaggerCustomize.css
IsSecured = True
RequestBody = 

2023-03-17 16:55:28.618 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:55:28 PM
ResponseBody = 



2023-03-17 16:55:28.909 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:55:28 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 16:55:29.486 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:55:29 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 16:55:58.412 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:55:58 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Mariami@gmail.com",
  "passwordHash": "Mariami!1"
}

2023-03-17 16:56:02.520 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:56:02 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTWFyaWFtaSIsIklkIjoiZWJhNzE2MTMtNzZhZC00ZDIyLWIzNWUtNTZmODM4Yzc3ODU2IiwibmJmIjoxNjc5MDU3NzYyLCJleHAiOjE2NzkwNjA3NjIsImlhdCI6MTY3OTA1Nzc2MiwiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.I1FJsBHYxQpDuG_wUDDaKvQPK52tb7yWL3LWi1FiiFE


2023-03-17 16:56:55.452 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:56:55 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "id": 9
}

2023-03-17 16:56:55.470 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:56:55 PM
ResponseBody = 



2023-03-17 16:57:09.865 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:57:09 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "id": 9
}

2023-03-17 16:57:09.870 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:57:09 PM
ResponseBody = 



2023-03-17 16:57:29.110 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:57:29 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "id": 9
}

2023-03-17 16:57:29.112 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:57:29 PM
ResponseBody = 



2023-03-17 16:58:38.833 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:58:38 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 16:58:39.219 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:58:39 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 16:58:39.467 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:58:39 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 16:58:39.710 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:58:39 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 16:58:49.408 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:58:49 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Mariami@gmail.com",
  "passwordHash": "Mariami!1"
}

2023-03-17 16:58:53.318 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:58:53 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTWFyaWFtaSIsIklkIjoiZWJhNzE2MTMtNzZhZC00ZDIyLWIzNWUtNTZmODM4Yzc3ODU2IiwibmJmIjoxNjc5MDU3OTMzLCJleHAiOjE2NzkwNjA5MzMsImlhdCI6MTY3OTA1NzkzMywiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.gVp7S3A_aDY_xNaKdugiuWiblpeJTz058K8BbjXfR6g


2023-03-17 16:58:59.290 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:58:59 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 16:58:59.314 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:58:59 PM
ResponseBody = 



2023-03-17 16:59:49.601 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 4:59:49 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Mariami@gmail.com",
  "passwordHash": "Mariami!1"
}

2023-03-17 16:59:49.689 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 4:59:49 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiTWFyaWFtaSIsIklkIjoiZWJhNzE2MTMtNzZhZC00ZDIyLWIzNWUtNTZmODM4Yzc3ODU2IiwibmJmIjoxNjc5MDU3OTg5LCJleHAiOjE2NzkwNjA5ODksImlhdCI6MTY3OTA1Nzk4OSwiaXNzIjoibG9jYWxob3N0IiwiYXVkIjoibG9jYWxob3N0In0.GKlO0O_pe2F-26yKejyVp81zxRQuJfBUus7pcKnjNCg


2023-03-17 17:00:06.260 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:00:06 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:00:06.262 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:00:06 PM
ResponseBody = 



2023-03-17 17:00:07.597 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:00:07 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:00:07.598 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:00:07 PM
ResponseBody = 



2023-03-17 17:00:49.233 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:00:49 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:00:49.572 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:00:49 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:00:49.843 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:00:49 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:00:50.169 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:00:50 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:01:30.074 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:01:30 PM
Address = https
Path = /api/Authorization/Register
IsSecured = True
RequestBody = {
  "firstName": "Lasha",
  "lastName": "Goginava",
  "email": "lashuti@gmail.com",
  "userName": "Lashuti",
  "passwordHash": "Mariami1!",
  "phoneNumber": "555454541"
}

2023-03-17 17:01:34.776 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:01:34 PM
ResponseBody = 
{"LogLevel":4
"Code":"Unexpected error"
"TraceId":"0HMP6SUGJTPV0:00000009"
"Type":null
"Title":"An error occurred while saving the entity changes. See the inner exception for details."
"Status":500
"Detail":null
"Instance":"/api/Authorization/Register"
"Extensions":{"TraceId":"0HMP6SUGJTPV0:00000009"}}


2023-03-17 17:02:33.142 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:02:33 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:02:33.465 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:02:33 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:02:33.683 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:02:33 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:02:33.918 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:02:33 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:02:45.985 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:02:45 PM
Address = https
Path = /api/Authorization/Register
IsSecured = True
RequestBody = {
  "firstName": "Lasha",
  "lastName": "Goginava",
  "email": "lashuti@gmail.com",
  "userName": "Lashuti",
  "passwordHash": "Mariami1!",
  "phoneNumber": "555454541"
}

2023-03-17 17:06:20.273 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:06:20 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:06:20.700 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:06:20 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:06:21.087 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:06:21 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:06:21.572 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:06:21 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:07:08.301 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:07:08 PM
Address = https
Path = /api/Authorization/Register
IsSecured = True
RequestBody = {
  "firstName": "Ani",
  "lastName": "beridze",
  "email": "Ani@gmail.com",
  "userName": "Anuki",
  "passwordHash": "AniAni!1",
  "phoneNumber": "599454645"
}

2023-03-17 17:07:14.125 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:07:14 PM
ResponseBody = 



2023-03-17 17:07:35.586 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:07:35 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:08:39.929 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:08:39 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1ODUwMSwiZXhwIjoxNjc5MDYxNTAxLCJpYXQiOjE2NzkwNTg1MDEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Iubns5XU9XiTvXoLXezszNnKUGp9ALiIvufs44zOxUU


2023-03-17 17:10:39.790 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:10:39 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:10:44.730 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:10:44 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1ODY0NCwiZXhwIjoxNjc5MDYxNjQ0LCJpYXQiOjE2NzkwNTg2NDQsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.qpsZnNAjpEKgFObpfG35unEN53DXlu7Ngj39cnaSkf4


2023-03-17 17:11:03.776 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:11:03 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:11:03.821 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:11:03 PM
ResponseBody = 



2023-03-17 17:11:12.689 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:11:12 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 17:11:12.814 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:11:12 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:11:24.779 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:11:24 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:11:24.780 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:11:24 PM
ResponseBody = 



2023-03-17 17:12:18.190 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:12:18 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1",
}

2023-03-17 17:12:18.198 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:12:18 PM
ResponseBody = 
{"type":"https://tools.ietf.org/html/rfc7231#section-6.5.1"
"title":"One or more validation errors occurred."
"status":400
"traceId":"00-995075cb58cbca0bf1a47647bc46d243-f432d8492db4f8ca-00"
"errors":{"$":["The JSON object contains a trailing comma at the end which is not supported in this mode. Change the reader options. Path: $ | LineNumber: 3 | BytePositionInLine: 0."]}


2023-03-17 17:13:13.152 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:13:13 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:13:22.167 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:13:22 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1ODgwMiwiZXhwIjoxNjc5MDYxODAyLCJpYXQiOjE2NzkwNTg4MDIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.5DKlaWLsfEGLCndXksFAc89V6NOq_wAa06dkLgNnvis


2023-03-17 17:13:52.157 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:13:52 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:13:52.162 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:13:52 PM
ResponseBody = 



2023-03-17 17:13:59.925 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:13:59 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 17:13:59.933 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:13:59 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:14:13.537 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:14:13 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "aaaaaaaaa",
  "description": "bbbbbbbbbb",
  "ticketQuantity": 4,
  "startTime": "2023-03-17T13:14:04.284Z",
  "endTime": "2023-03-17T13:14:04.284Z"
}

2023-03-17 17:14:13.541 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:14:13 PM
ResponseBody = 



2023-03-17 17:14:43.768 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:14:43 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:14:44.163 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:14:44 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:14:44.393 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:14:44 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:14:44.629 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:14:44 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:15:06.302 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:15:06 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:17:14.513 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:17:14 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1OTAxMywiZXhwIjoxNjc5MDYyMDEzLCJpYXQiOjE2NzkwNTkwMTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.fFvgG62_fdyFDLn0ynS6AgJMZHPLxMrK0dEpqGKTKiE


2023-03-17 17:17:48.091 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:17:48 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:17:48.130 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:17:48 PM
ResponseBody = 



2023-03-17 17:18:54.612 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:18:54 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:18:54.966 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:18:54 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:18:55.223 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:18:55 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:18:55.476 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:18:55 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:19:22.129 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:19:22 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:19:36.826 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:19:36 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1OTE3NiwiZXhwIjoxNjc5MDYyMTc2LCJpYXQiOjE2NzkwNTkxNzYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.R7KocuIJl3BHpk0uOOGpfDEn-z1cqMA5LG-of4lNSfk


2023-03-17 17:19:50.275 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:19:50 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:19:50.309 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:19:50 PM
ResponseBody = 



2023-03-17 17:19:53.133 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:19:53 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:19:53.136 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:19:53 PM
ResponseBody = 



2023-03-17 17:20:49.596 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:20:49 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "string",
  "description": "string",
  "ticketQuantity": 4,
  "startTime": "2023-03-17T13:20:43.294Z",
  "endTime": "2023-03-17T13:20:43.294Z"
}

2023-03-17 17:20:49.597 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:20:49 PM
ResponseBody = 



2023-03-17 17:26:17.336 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:26:17 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:26:17.662 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:26:17 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:26:17.912 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:26:17 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:26:18.190 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:26:18 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:26:43.592 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:26:43 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:26:47.706 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:26:47 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1OTYwNywiZXhwIjoxNjc5MDYyNjA3LCJpYXQiOjE2NzkwNTk2MDcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SONeCu5whqWYYoNJ-zmW1ZsQTo1ghTv3n8JOR4HcC5w


2023-03-17 17:27:12.991 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:27:12 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:27:13.027 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:27:13 PM
ResponseBody = 



2023-03-17 17:27:46.351 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:27:46 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 17:27:46.571 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:27:46 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:28:03.639 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:28:03 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "string",
  "description": "string",
  "ticketQuantity": 77,
  "startTime": "2023-03-17T13:27:58.897Z",
  "endTime": "2023-03-17T13:27:58.897Z"
}

2023-03-17 17:28:03.641 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:28:03 PM
ResponseBody = 



2023-03-17 17:30:04.741 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:04 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:30:05.146 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:05 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:30:05.399 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:05 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:30:05.629 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:05 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:30:28.548 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:28 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:30:32.608 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:32 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA1OTgzMiwiZXhwIjoxNjc5MDYyODMyLCJpYXQiOjE2NzkwNTk4MzIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.kdjPQTtQ8jiD_O9WrlezlaA_AhsvhudVj2wvnCepDjI


2023-03-17 17:30:46.528 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:46 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:30:46.552 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:46 PM
ResponseBody = 



2023-03-17 17:30:47.999 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:47 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:30:48.003 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:48 PM
ResponseBody = 



2023-03-17 17:30:56.779 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:30:56 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "string",
  "description": "string",
  "ticketQuantity": 44,
  "startTime": "2023-03-17T13:30:52.759Z",
  "endTime": "2023-03-17T13:30:52.759Z"
}

2023-03-17 17:30:56.781 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:30:56 PM
ResponseBody = 



2023-03-17 17:33:17.183 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:33:17 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:33:17.580 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:33:17 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:33:17.827 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:33:17 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:33:18.094 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:33:18 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:33:45.375 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:33:45 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:33:49.294 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:33:49 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDAyOSwiZXhwIjoxNjc5MDYzMDI5LCJpYXQiOjE2NzkwNjAwMjksImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.e_-WO1FyHx7qxTm2rFN3KQtq_tLXHG_quNrG7yy-R-k


2023-03-17 17:34:03.481 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:34:03 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 17:34:03.675 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:34:03 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:34:10.746 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:34:10 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:34:10.769 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:34:10 PM
ResponseBody = 



2023-03-17 17:34:24.811 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:34:24 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "string",
  "description": "string",
  "ticketQuantity": 44,
  "startTime": "2023-03-17T13:34:19.556Z",
  "endTime": "2023-03-17T13:34:19.556Z"
}

2023-03-17 17:34:24.813 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:34:24 PM
ResponseBody = 



2023-03-17 17:35:07.124 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:35:07 PM
Address = https
Path = /api/Event/GetAllEvent
IsSecured = True
RequestBody = 

2023-03-17 17:35:07.174 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:35:07 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"stringggggggg"
"description":"striiiiiing"
"ticketQuantity":21
"startTime":"2023-03-15T21:21:18.797"
"endTime":"2023-03-15T21:21:18.797"
"isAccepted":false}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"Mariami"
"description":"sindorelabindorela"
"ticketQuantity":22
"startTime":"2023-03-16T08:21:45.173"
"endTime":"2023-03-16T08:21:45.173"
"isAccepted":false}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:35:13.728 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:35:13 PM
Address = https
Path = /api/Event/21
IsSecured = True
RequestBody = 

2023-03-17 17:35:13.835 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:35:13 PM
ResponseBody = 
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}


2023-03-17 17:37:49.717 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:37:49 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:37:50.054 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:37:50 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:37:50.291 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:37:50 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:37:50.581 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:37:50 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:38:01.496 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:38:01 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:38:05.477 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:38:05 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDI4NSwiZXhwIjoxNjc5MDYzMjg1LCJpYXQiOjE2NzkwNjAyODUsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.rN5uvd30cSxh7hXK0FfEZ6FPiUA1p0xR3vP25dw5knc


2023-03-17 17:38:24.652 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:38:24 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:38:32.412 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:38:32 PM
ResponseBody = 
{"LogLevel":4
"Code":"Unexpected error"
"TraceId":"0HMP6TJ6A01HF:0000000B"
"Type":null
"Title":"Sequence contains no matching element"
"Status":500
"Detail":null
"Instance":"/api/User/GetMyEvents"
"Extensions":{"TraceId":"0HMP6TJ6A01HF:0000000B"}}


2023-03-17 17:40:24.135 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:40:24 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:40:24.477 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:40:24 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:40:24.756 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:40:24 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:40:25.069 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:40:25 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:40:32.444 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:40:32 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:40:39.101 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:40:39 PM
ResponseBody = 
{"LogLevel":4
"Code":"Unexpected error"
"TraceId":"0HMP6TKKAUHKL:00000009"
"Type":null
"Title":"Sequence contains no matching element"
"Status":500
"Detail":null
"Instance":"/api/User/GetMyEvents"
"Extensions":{"TraceId":"0HMP6TKKAUHKL:00000009"}}


2023-03-17 17:41:07.541 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:41:07 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:41:58.793 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:41:58 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:41:59.308 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:41:59 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:41:59.721 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:41:59 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:42:00.287 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:42:00 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:42:21.340 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:42:21 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:42:25.337 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:42:25 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDU0NSwiZXhwIjoxNjc5MDYzNTQ1LCJpYXQiOjE2NzkwNjA1NDUsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.UIThGTxuwoyBI-INDB3S-P0skJnxjb4s5ZZ4sVGXyvc


2023-03-17 17:42:39.294 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:42:39 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:43:37.914 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:43:37 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:43:38.261 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:43:38 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:43:38.584 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:43:38 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:43:38.978 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:43:38 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:43:59.171 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:43:59 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:44:02.997 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:44:02 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDY0MiwiZXhwIjoxNjc5MDYzNjQyLCJpYXQiOjE2NzkwNjA2NDIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.EcGUFG8LeetOrMeUO-_H-Am3dl6a4GdqkFyjRyT2HP0


2023-03-17 17:44:25.538 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:44:25 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:45:11.888 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:45:11 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:45:12.296 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:45:12 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:45:12.557 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:45:12 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:45:12.901 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:45:12 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:45:23.419 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:45:23 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:45:27.743 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:45:27 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDcyNywiZXhwIjoxNjc5MDYzNzI3LCJpYXQiOjE2NzkwNjA3MjcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.l9wwkvA-1mInKlZ8nejwixo7dLV5AVqz_5sZKYt64dc


2023-03-17 17:45:58.155 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:45:58 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "string",
  "description": "string",
  "ticketQuantity": 44,
  "startTime": "2023-03-17T13:45:53.078Z",
  "endTime": "2023-03-17T13:45:53.078Z"
}

2023-03-17 17:45:58.663 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:45:58 PM
ResponseBody = 
{"LogLevel":4
"Code":"Unexpected error"
"TraceId":"0HMP6TNA5E4IA:0000000B"
"Type":null
"Title":"Sequence contains no matching element"
"Status":500
"Detail":null
"Instance":"/api/User"
"Extensions":{"TraceId":"0HMP6TNA5E4IA:0000000B"}}


2023-03-17 17:46:15.610 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:46:15 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:48:46.379 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:48:46 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:48:46.833 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:48:46 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:48:47.123 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:48:47 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:48:47.501 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:48:47 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:49:14.473 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:49:14 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:49:18.485 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:49:18 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MDk1OCwiZXhwIjoxNjc5MDYzOTU4LCJpYXQiOjE2NzkwNjA5NTgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.D4hRolHsdYQ8ORhI_Qu_xe0vy-ATBVEL2zLsw-9hibs


2023-03-17 17:49:40.163 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:49:40 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:49:40.218 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:49:40 PM
ResponseBody = 



2023-03-17 17:51:25.853 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:51:25 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:51:26.285 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:51:26 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:51:26.605 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:51:26 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:51:26.926 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:51:26 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:51:43.338 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:51:43 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:51:47.568 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:51:47 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MTEwNywiZXhwIjoxNjc5MDY0MTA3LCJpYXQiOjE2NzkwNjExMDcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.FFa2JUPp9UXpFEvqiO2dIx8O_T3N8QhH9j6EuChpC2g


2023-03-17 17:52:02.780 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:52:02 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:52:02.802 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:52:02 PM
ResponseBody = 



2023-03-17 17:53:38.877 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:53:38 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:53:39.251 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:53:39 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:53:39.595 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:53:39 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:53:39.851 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:53:39 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 17:53:52.913 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:53:52 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 17:53:56.859 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:53:56 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MTIzNiwiZXhwIjoxNjc5MDY0MjM2LCJpYXQiOjE2NzkwNjEyMzYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.KjzBmi4YdgWLue1QLqqkqAmo4d_dhotLf2huD20mMc0


2023-03-17 17:54:10.219 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:54:10 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:54:10.246 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:54:10 PM
ResponseBody = 



2023-03-17 17:54:25.760 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:54:25 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 17:54:25.979 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:54:25 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 17:54:54.855 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:54:54 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 17:54:54.857 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:54:54 PM
ResponseBody = 



2023-03-17 17:55:47.079 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:55:47 PM
Address = https
Path = /swagger/index.html
IsSecured = True
RequestBody = 

2023-03-17 17:55:47.391 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:55:47 PM
ResponseBody = 
<!-- HTML for static distribution bundle build -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Swagger UI</title>
    <link rel="stylesheet" type="text/css" href="./swagger-ui.css">
    <link rel="icon" type="image/png" href="./favicon-32x32.png" sizes="32x32" />
    <link rel="icon" type="image/png" href="./favicon-16x16.png" sizes="16x16" />
    <style>

        html {
            box-sizing: border-box;
            overflow: -moz-scrollbars-vertical;
            overflow-y: scroll;
        }

        *

        *:before

        *:after {
            box-sizing: inherit;
        }

        body {
            margin: 0;
            background: #fafafa;
        }
    </style>
    <link href='/SwaggerCustomize.css' rel='stylesheet' media='screen' type='text/css' />

</head>

<body>
    <div id="swagger-ui"></div>

    <!-- Workaround for https://github.com/swagger-api/swagger-editor/issues/1371 -->
    <script>
        if (window.navigator.userAgent.indexOf("Edge") > -1) {
            console.log("Removing native Edge fetch in favor of swagger-ui's polyfill")
            window.fetch = undefined;
        }
    </script>

    <script src="./swagger-ui-bundle.js"></script>
    <script src="./swagger-ui-standalone-preset.js"></script>
    <script>
        /* Source: https://gist.github.com/lamberta/3768814
         * Parse a string function definition and return a function object. Does not use eval.
         * @param {string} str
         * @return {function}
         *
         * Example:
         *  var f = function (x
 y) { return x * y; };
         *  var g = parseFunction(f.toString());
         *  g(33
 3); //=> 99
         */
        function parseFunction(str) {
            if (!str) return void (0);

            var fn_body_idx = str.indexOf('{')

                fn_body = str.substring(fn_body_idx + 1
 str.lastIndexOf('}'))

                fn_declare = str.substring(0
 fn_body_idx)

                fn_params = fn_declare.substring(fn_declare.indexOf('(') + 1
 fn_declare.lastIndexOf(')'))

                args = fn_params.split('
');

            args.push(fn_body);

            function Fn() {
                return Function.apply(this
 args);
            }
            Fn.prototype = Function.prototype;

            return new Fn();
        }

        window.onload = function () {
            var configObject = JSON.parse('{"urls":[{"url":"v1/swagger.json"
"name":"Events.API v1"}]
"deepLinking":false
"persistAuthorization":false
"displayOperationId":false
"defaultModelsExpandDepth":1
"defaultModelExpandDepth":1
"defaultModelRendering":"example"
"displayRequestDuration":false
"docExpansion":"list"
"showExtensions":false
"showCommonExtensions":false
"supportedSubmitMethods":["get"
"put"
"post"
"delete"
"options"
"head"
"patch"
"trace"]
"tryItOutEnabled":false}');
            var oauthConfigObject = JSON.parse('{"scopeSeparator":" "
"scopes":[]
"useBasicAuthenticationWithAccessCodeGrant":false
"usePkceWithAuthorizationCodeGrant":false}');

            // Workaround for https://github.com/swagger-api/swagger-ui/issues/5945
            configObject.urls.forEach(function (item) {
                if (item.url.startsWith("http") || item.url.startsWith("/")) return;
                item.url = window.location.href.replace("index.html"
 item.url).split('#')[0];
            });

            // If validatorUrl is not explicitly provided
 disable the feature by setting to null
            if (!configObject.hasOwnProperty("validatorUrl"))
                configObject.validatorUrl = null

            // If oauth2RedirectUrl isn't specified
 use the built-in default
            if (!configObject.hasOwnProperty("oauth2RedirectUrl"))
                configObject.oauth2RedirectUrl = (new URL("oauth2-redirect.html"
 window.location.href)).href;

            // Apply mandatory parameters
            configObject.dom_id = "#swagger-ui";
            configObject.presets = [SwaggerUIBundle.presets.apis
 SwaggerUIStandalonePreset];
            configObject.layout = "StandaloneLayout";

            // Parse and add interceptor functions
            var interceptors = JSON.parse('{"RequestInterceptorFunction":null
"ResponseInterceptorFunction":null}');
            if (interceptors.RequestInterceptorFunction)
                configObject.requestInterceptor = parseFunction(interceptors.RequestInterceptorFunction);
            if (interceptors.ResponseInterceptorFunction)
                configObject.responseInterceptor = parseFunction(interceptors.ResponseInterceptorFunction);

            // Begin Swagger UI call region

            const ui = SwaggerUIBundle(configObject);

            ui.initOAuth(oauthConfigObject);

            // End Swagger UI call region

            window.ui = ui
        }
    </script>
</body>
</html>



2023-03-17 17:55:47.630 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 5:55:47 PM
Address = https
Path = /swagger/v1/swagger.json
IsSecured = True
RequestBody = 

2023-03-17 17:55:47.896 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 5:55:47 PM
ResponseBody = 
{
  "openapi": "3.0.1"

  "info": {
    "title": "Event Application"

    "description": ""

    "contact": {
      "name": "Event Application"

      "email": "mariamutrugashvili0@gmail.com"
    }

    "version": "v1"
  }

  "paths": {
    "/api/Authorization/Register": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Registration"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserCreateModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Authorization/LogIn": {
      "post": {
        "tags": [
          "Authorization"
        ]

        "summary": "Log In"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Users.Requests.UserLogInModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }

              "application/json": {
                "schema": {
                  "type": "string"
                }
              }

              "text/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }

    "/api/Event/{id}": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get a specific Event"

        "parameters": [
          {
            "name": "id"

            "in": "path"

            "description": ""

            "required": true

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAllEvent": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/Event": {
      "delete": {
        "tags": [
          "Event"
        ]

        "summary": "Delete a Event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "Event"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "get": {
        "tags": [
          "Event"
        ]

        "summary": "publish a event"

        "parameters": [
          {
            "name": "id"

            "in": "query"

            "description": ""

            "schema": {
              "type": "integer"

              "format": "int32"
            }
          }
        ]

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/Event/GetAll": {
      "get": {
        "tags": [
          "Event"
        ]

        "summary": "Get All Unpublished Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetMyEvents": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All My Event"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User/GetAll": {
      "get": {
        "tags": [
          "User"
        ]

        "summary": "Get All Events"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.Application.Events.Responses.EventResponseModel"
                  }
                }
              }
            }
          }
        }
      }
    }

    "/api/User": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Create a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPostModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }

      "put": {
        "tags": [
          "User"
        ]

        "summary": "Update a Event"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Events.Requests.EventRequestPutModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/api/User/BuyTicket": {
      "post": {
        "tags": [
          "User"
        ]

        "summary": "Buy a Ticket"

        "requestBody": {
          "description": ""

          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }

            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/Events.Application.Orders.OrdersRequestModel"
              }
            }
          }
        }

        "responses": {
          "200": {
            "description": "Success"
          }
        }
      }
    }

    "/WeatherForecast": {
      "get": {
        "tags": [
          "WeatherForecast"
        ]

        "operationId": "GetWeatherForecast"

        "responses": {
          "200": {
            "description": "Success"

            "content": {
              "text/plain": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "application/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }

              "text/json": {
                "schema": {
                  "type": "array"

                  "items": {
                    "$ref": "#/components/schemas/Events.API.WeatherForecast"
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  "components": {
    "schemas": {
      "Events.API.WeatherForecast": {
        "type": "object"

        "properties": {
          "date": {
            "type": "string"

            "format": "date-time"
          }

          "temperatureC": {
            "type": "integer"

            "format": "int32"
          }

          "temperatureF": {
            "type": "integer"

            "format": "int32"

            "readOnly": true
          }

          "summary": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPostModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Requests.EventRequestPutModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }

          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Events.Responses.EventResponseModel": {
        "type": "object"

        "properties": {
          "title": {
            "type": "string"

            "nullable": true
          }

          "description": {
            "type": "string"

            "nullable": true
          }

          "ticketQuantity": {
            "type": "integer"

            "format": "int32"
          }

          "startTime": {
            "type": "string"

            "format": "date-time"
          }

          "endTime": {
            "type": "string"

            "format": "date-time"
          }

          "isAccepted": {
            "type": "boolean"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Orders.OrdersRequestModel": {
        "type": "object"

        "properties": {
          "id": {
            "type": "integer"

            "format": "int32"
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserCreateModel": {
        "type": "object"

        "properties": {
          "firstName": {
            "type": "string"

            "nullable": true
          }

          "lastName": {
            "type": "string"

            "nullable": true
          }

          "email": {
            "type": "string"

            "nullable": true
          }

          "userName": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }

          "phoneNumber": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }

      "Events.Application.Users.Requests.UserLogInModel": {
        "type": "object"

        "properties": {
          "email": {
            "type": "string"

            "nullable": true
          }

          "passwordHash": {
            "type": "string"

            "nullable": true
          }
        }

        "additionalProperties": false
      }
    }

    "securitySchemes": {
      "Bearer": {
        "type": "apiKey"

        "description": "Please type the word 'Bearer' followed by space and then JWT"

        "name": "Authorization"

        "in": "header"
      }
    }
  }

  "security": [
    {
      "basic": [ ]
    }
  ]
}


2023-03-17 18:08:04.785 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 6:08:04 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 18:08:08.743 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:08:08 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjA4OCwiZXhwIjoxNjc5MDY1MDg4LCJpYXQiOjE2NzkwNjIwODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SzhZoB60Q2_F_b1wxoNFfAm-3IFziW-KBAI9FYfoqQY


2023-03-17 18:08:24.587 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjA4OCwiZXhwIjoxNjc5MDY1MDg4LCJpYXQiOjE2NzkwNjIwODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SzhZoB60Q2_F_b1wxoNFfAm-3IFziW-KBAI9FYfoqQY
IP = ::1
Time = 3/17/2023 6:08:24 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 18:08:51.938 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:08:51 PM
ResponseBody = 
[]


2023-03-17 18:09:43.442 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjA4OCwiZXhwIjoxNjc5MDY1MDg4LCJpYXQiOjE2NzkwNjIwODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SzhZoB60Q2_F_b1wxoNFfAm-3IFziW-KBAI9FYfoqQY
IP = ::1
Time = 3/17/2023 6:09:43 PM
Address = https
Path = /api/User
IsSecured = True
RequestBody = {
  "title": "TAVIS CHAMOXRCHOBA",
  "description": "SIKVDILI MINDA",
  "ticketQuantity": 50,
  "startTime": "2023-03-17T14:09:22.545Z",
  "endTime": "2023-03-17T14:09:22.545Z"
}

2023-03-17 18:09:43.866 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:09:43 PM
ResponseBody = 



2023-03-17 18:10:36.197 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjA4OCwiZXhwIjoxNjc5MDY1MDg4LCJpYXQiOjE2NzkwNjIwODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SzhZoB60Q2_F_b1wxoNFfAm-3IFziW-KBAI9FYfoqQY
IP = ::1
Time = 3/17/2023 6:10:36 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "id": 24
}

2023-03-17 18:10:36.621 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:10:36 PM
ResponseBody = 
No response body


2023-03-17 18:11:16.947 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjA4OCwiZXhwIjoxNjc5MDY1MDg4LCJpYXQiOjE2NzkwNjIwODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SzhZoB60Q2_F_b1wxoNFfAm-3IFziW-KBAI9FYfoqQY
IP = ::1
Time = 3/17/2023 6:11:16 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "id": 24
}

2023-03-17 18:16:49.275 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 6:16:49 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 18:16:53.456 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:16:53 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjYxMywiZXhwIjoxNjc5MDY1NjEzLCJpYXQiOjE2NzkwNjI2MTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Jsl4m1nf6tY7NZOPvxx5b9eEoy8GeKdmDQ5mcBTZDRw


2023-03-17 18:17:23.514 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjYxMywiZXhwIjoxNjc5MDY1NjEzLCJpYXQiOjE2NzkwNjI2MTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Jsl4m1nf6tY7NZOPvxx5b9eEoy8GeKdmDQ5mcBTZDRw
IP = ::1
Time = 3/17/2023 6:17:23 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 18:17:23.854 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:17:23 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 18:17:47.066 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2MjYxMywiZXhwIjoxNjc5MDY1NjEzLCJpYXQiOjE2NzkwNjI2MTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Jsl4m1nf6tY7NZOPvxx5b9eEoy8GeKdmDQ5mcBTZDRw
IP = ::1
Time = 3/17/2023 6:17:47 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 18:17:52.335 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 6:17:52 PM
ResponseBody = 



2023-03-17 19:42:38.633 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 7:42:38 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 19:42:42.786 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:42:42 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2Nzc2MiwiZXhwIjoxNjc5MDcwNzYyLCJpYXQiOjE2NzkwNjc3NjIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.8mw6bLMcelghlaS4U6YotgUnM_Cw0dmWe3fXwHTH91A


2023-03-17 19:42:56.283 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2Nzc2MiwiZXhwIjoxNjc5MDcwNzYyLCJpYXQiOjE2NzkwNjc3NjIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.8mw6bLMcelghlaS4U6YotgUnM_Cw0dmWe3fXwHTH91A
IP = ::1
Time = 3/17/2023 7:42:56 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 19:42:56.657 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:42:56 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 19:43:24.749 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2Nzc2MiwiZXhwIjoxNjc5MDcwNzYyLCJpYXQiOjE2NzkwNjc3NjIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.8mw6bLMcelghlaS4U6YotgUnM_Cw0dmWe3fXwHTH91A
IP = ::1
Time = 3/17/2023 7:43:24 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 19:43:28.449 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:43:28 PM
ResponseBody = 
No response body


2023-03-17 19:43:46.430 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2Nzc2MiwiZXhwIjoxNjc5MDcwNzYyLCJpYXQiOjE2NzkwNjc3NjIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.8mw6bLMcelghlaS4U6YotgUnM_Cw0dmWe3fXwHTH91A
IP = ::1
Time = 3/17/2023 7:43:46 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 19:46:09.606 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:46:09 PM
ResponseBody = 
No response body


2023-03-17 19:49:34.927 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 7:49:34 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 19:49:38.725 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:49:38 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODE3OCwiZXhwIjoxNjc5MDcxMTc4LCJpYXQiOjE2NzkwNjgxNzgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Ih3tZiIlU9NT6LaLvrEFAgwrWVw5ncz4_igF_7sej0Y


2023-03-17 19:50:01.096 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODE3OCwiZXhwIjoxNjc5MDcxMTc4LCJpYXQiOjE2NzkwNjgxNzgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Ih3tZiIlU9NT6LaLvrEFAgwrWVw5ncz4_igF_7sej0Y
IP = ::1
Time = 3/17/2023 7:50:01 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 19:50:07.823 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:50:07 PM
ResponseBody = 
No response body


2023-03-17 19:50:38.973 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODE3OCwiZXhwIjoxNjc5MDcxMTc4LCJpYXQiOjE2NzkwNjgxNzgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Ih3tZiIlU9NT6LaLvrEFAgwrWVw5ncz4_igF_7sej0Y
IP = ::1
Time = 3/17/2023 7:50:38 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 19:50:39.297 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:50:39 PM
ResponseBody = 
No response body


2023-03-17 19:50:46.876 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODE3OCwiZXhwIjoxNjc5MDcxMTc4LCJpYXQiOjE2NzkwNjgxNzgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.Ih3tZiIlU9NT6LaLvrEFAgwrWVw5ncz4_igF_7sej0Y
IP = ::1
Time = 3/17/2023 7:50:46 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 19:50:47.188 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:50:47 PM
ResponseBody = 
No response body


2023-03-17 19:51:24.240 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 7:51:24 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 19:51:28.493 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:51:28 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODI4OCwiZXhwIjoxNjc5MDcxMjg4LCJpYXQiOjE2NzkwNjgyODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.aNckLW1uaRy74xCrFVxR0XX9vZLjt0eqc5Zj_z8qbe0


2023-03-17 19:52:09.895 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODI4OCwiZXhwIjoxNjc5MDcxMjg4LCJpYXQiOjE2NzkwNjgyODgsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.aNckLW1uaRy74xCrFVxR0XX9vZLjt0eqc5Zj_z8qbe0
IP = ::1
Time = 3/17/2023 7:52:09 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 19:52:11.076 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:52:11 PM
ResponseBody = 
No response body


2023-03-17 19:52:42.031 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 7:52:42 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 19:52:46.112 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:52:46 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODM2NSwiZXhwIjoxNjc5MDcxMzY1LCJpYXQiOjE2NzkwNjgzNjUsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.dCWTD9D37FcZNgJeP0OwfXoYundkXvz2xJsLqgdlLq8


2023-03-17 19:53:09.798 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA2ODM2NSwiZXhwIjoxNjc5MDcxMzY1LCJpYXQiOjE2NzkwNjgzNjUsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.dCWTD9D37FcZNgJeP0OwfXoYundkXvz2xJsLqgdlLq8
IP = ::1
Time = 3/17/2023 7:53:09 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 19:57:08.455 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 7:57:08 PM
ResponseBody = 
No response body


2023-03-17 21:09:48.954 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:09:48 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:09:53.919 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:09:53 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8


2023-03-17 21:10:09.103 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:10:09 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 21:10:09.481 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:10:09 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 21:10:14.628 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:10:14 PM
Address = https
Path = /api/User/GetAll
IsSecured = True
RequestBody = 

2023-03-17 21:10:14.699 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:10:14 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":10
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}]


2023-03-17 21:10:29.815 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:10:29 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 21:10:33.290 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:10:33 PM
ResponseBody = 
No response body


2023-03-17 21:10:40.754 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:10:40 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 21:10:51.601 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:10:51 PM
ResponseBody = 
No response body


2023-03-17 21:11:02.362 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:11:02 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 21:14:43.228 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:14:43 PM
ResponseBody = 
No response body


2023-03-17 21:16:45.299 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3Mjk5MywiZXhwIjoxNjc5MDc1OTkzLCJpYXQiOjE2NzkwNzI5OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.6_fC7tNVZWfKTT6KfiGiR4OlJHXWEXFwTJ_o4fknMZ8
IP = ::1
Time = 3/17/2023 9:16:45 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 24
}

2023-03-17 21:16:48.855 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:16:48 PM
ResponseBody = 
No response body


2023-03-17 21:17:01.554 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:17:01 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 21:17:01.570 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:17:01 PM
ResponseBody = 



2023-03-17 21:17:26.441 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:17:26 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:17:26.511 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:17:26 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzQ0NiwiZXhwIjoxNjc5MDc2NDQ2LCJpYXQiOjE2NzkwNzM0NDYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.9Y8qUiL1FJGDDqc58SkK6yPIyMIowfXmxpy3NVT35Tw


2023-03-17 21:17:40.927 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzQ0NiwiZXhwIjoxNjc5MDc2NDQ2LCJpYXQiOjE2NzkwNzM0NDYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.9Y8qUiL1FJGDDqc58SkK6yPIyMIowfXmxpy3NVT35Tw
IP = ::1
Time = 3/17/2023 9:17:40 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 23
}

2023-03-17 21:17:43.425 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:17:43 PM
ResponseBody = 
No response body


2023-03-17 21:19:49.579 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:19:49 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:19:53.852 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:19:53 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzU5MywiZXhwIjoxNjc5MDc2NTkzLCJpYXQiOjE2NzkwNzM1OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.rjVm-n0pJFU_71SP_ph_eOAV4g-32DdgG61cUZH2aS0


2023-03-17 21:20:19.794 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzU5MywiZXhwIjoxNjc5MDc2NTkzLCJpYXQiOjE2NzkwNzM1OTMsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.rjVm-n0pJFU_71SP_ph_eOAV4g-32DdgG61cUZH2aS0
IP = ::1
Time = 3/17/2023 9:20:19 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 9
}

2023-03-17 21:22:10.511 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:22:10 PM
ResponseBody = 
No response body


2023-03-17 21:23:33.566 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:23:33 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:23:37.919 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:23:37 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzgxNywiZXhwIjoxNjc5MDc2ODE3LCJpYXQiOjE2NzkwNzM4MTcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SxcIiKkdeF9Gk_SVblPeGeKowb4uAbFLeo4lmNQnYdc


2023-03-17 21:23:53.314 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzgxNywiZXhwIjoxNjc5MDc2ODE3LCJpYXQiOjE2NzkwNzM4MTcsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.SxcIiKkdeF9Gk_SVblPeGeKowb4uAbFLeo4lmNQnYdc
IP = ::1
Time = 3/17/2023 9:23:53 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 9
}

2023-03-17 21:25:07.558 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:25:07 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:25:11.949 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:25:11 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzkxMSwiZXhwIjoxNjc5MDc2OTExLCJpYXQiOjE2NzkwNzM5MTEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.T8T85zBFuaOWUWh8zrKss9eaRH9B-L1mucmwXli4MaM


2023-03-17 21:25:24.129 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzkxMSwiZXhwIjoxNjc5MDc2OTExLCJpYXQiOjE2NzkwNzM5MTEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.T8T85zBFuaOWUWh8zrKss9eaRH9B-L1mucmwXli4MaM
IP = ::1
Time = 3/17/2023 9:25:24 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 21:25:24.474 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:25:24 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 21:25:36.695 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3MzkxMSwiZXhwIjoxNjc5MDc2OTExLCJpYXQiOjE2NzkwNzM5MTEsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.T8T85zBFuaOWUWh8zrKss9eaRH9B-L1mucmwXli4MaM
IP = ::1
Time = 3/17/2023 9:25:36 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 16
}

2023-03-17 21:28:03.026 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:28:03 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 21:28:07.203 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:28:07 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3NDA4NiwiZXhwIjoxNjc5MDc3MDg2LCJpYXQiOjE2NzkwNzQwODYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.gm_rO-0cMNY1g6PXrc-NWYwGGNlQ4jbYNm_hBjZtD-Y


2023-03-17 21:28:20.039 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3NDA4NiwiZXhwIjoxNjc5MDc3MDg2LCJpYXQiOjE2NzkwNzQwODYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.gm_rO-0cMNY1g6PXrc-NWYwGGNlQ4jbYNm_hBjZtD-Y
IP = ::1
Time = 3/17/2023 9:28:20 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 21:28:20.374 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:28:20 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 21:28:37.970 +04:00 [INF] 
-------------------------------------------------
JWTtoken = bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3NDA4NiwiZXhwIjoxNjc5MDc3MDg2LCJpYXQiOjE2NzkwNzQwODYsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.gm_rO-0cMNY1g6PXrc-NWYwGGNlQ4jbYNm_hBjZtD-Y
IP = ::1
Time = 3/17/2023 9:28:37 PM
Address = https
Path = /api/User/BuyTicket
IsSecured = True
RequestBody = {
  "eventItemId": 19
}

2023-03-17 21:28:42.788 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:28:42 PM
ResponseBody = 



2023-03-17 21:57:13.287 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:57:13 PM
Address = https
Path = /api/Event/9
IsSecured = True
RequestBody = 

2023-03-17 21:57:17.144 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:57:17 PM
ResponseBody = 
{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}


2023-03-17 21:57:24.244 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:57:24 PM
Address = https
Path = /api/Event/GetAllEvent
IsSecured = True
RequestBody = 

2023-03-17 21:57:24.398 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:57:24 PM
ResponseBody = 
[{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":15
"startTime":"2023-03-15T13:03:18.697"
"endTime":"2023-03-15T13:03:18.697"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":45
"startTime":"2023-03-16T08:15:30.187"
"endTime":"2023-03-16T08:15:30.187"
"isAccepted":true}
{"title":"string"
"description":"string"
"ticketQuantity":9
"startTime":"2023-03-15T16:21:09.523"
"endTime":"2023-03-15T16:21:09.523"
"isAccepted":true}
{"title":"stringggggggg"
"description":"striiiiiing"
"ticketQuantity":21
"startTime":"2023-03-15T21:21:18.797"
"endTime":"2023-03-15T21:21:18.797"
"isAccepted":false}
{"title":"Lashadebili"
"description":"string"
"ticketQuantity":40
"startTime":"2023-03-16T08:58:10.053"
"endTime":"2023-03-16T08:58:10.053"
"isAccepted":true}
{"title":"Mariami"
"description":"sindorelabindorela"
"ticketQuantity":22
"startTime":"2023-03-16T08:21:45.173"
"endTime":"2023-03-16T08:21:45.173"
"isAccepted":false}
{"title":"string"
"description":"string"
"ticketQuantity":24
"startTime":"2023-03-16T08:46:26.707"
"endTime":"2023-03-16T08:46:26.707"
"isAccepted":true}
{"title":"lasha"
"description":"MARIAMICHKVIANI"
"ticketQuantity":30
"startTime":"2023-03-16T18:15:51.317"
"endTime":"2023-03-16T18:15:51.317"
"isAccepted":true}
{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 21:57:34.323 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 9:57:34 PM
Address = https
Path = /api/Event/GetAll
IsSecured = True
RequestBody = 

2023-03-17 21:57:34.375 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 9:57:34 PM
ResponseBody = 
[{"id":20
"userId":null
"title":"stringggggggg"
"description":"striiiiiing"
"isAccepted":false}
{"id":22
"userId":"eba71613-76ad-4d22-b35e-56f838c77856"
"title":"Mariami"
"description":"sindorelabindorela"
"isAccepted":false}
{"id":25
"userId":"c65062d0-a76a-4598-974b-754e689b2342"
"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"isAccepted":false}]


2023-03-17 22:02:18.655 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 10:02:18 PM
Address = https
Path = /api/Authorization/LogIn
IsSecured = True
RequestBody = {
  "email": "Ani@gmail.com",
  "passwordHash": "AniAni!1"
}

2023-03-17 22:02:22.735 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 10:02:22 PM
ResponseBody = 
eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3NjE0MiwiZXhwIjoxNjc5MDc5MTQyLCJpYXQiOjE2NzkwNzYxNDIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.22NSqcgfmAUmmr6Win4jPEvUiahHpdVtSVanaiib9EY


2023-03-17 22:02:31.723 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 10:02:31 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 22:02:31.745 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 10:02:31 PM
ResponseBody = 



2023-03-17 22:02:52.520 +04:00 [INF] 
-------------------------------------------------
JWTtoken = Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiQW51a2kiLCJJZCI6ImM2NTA2MmQwLWE3NmEtNDU5OC05NzRiLTc1NGU2ODliMjM0MiIsIm5iZiI6MTY3OTA3NjE0MiwiZXhwIjoxNjc5MDc5MTQyLCJpYXQiOjE2NzkwNzYxNDIsImlzcyI6ImxvY2FsaG9zdCIsImF1ZCI6ImxvY2FsaG9zdCJ9.22NSqcgfmAUmmr6Win4jPEvUiahHpdVtSVanaiib9EY
IP = ::1
Time = 3/17/2023 10:02:52 PM
Address = https
Path = /api/User/GetMyEvents
IsSecured = True
RequestBody = 

2023-03-17 22:02:52.816 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 10:02:52 PM
ResponseBody = 
[{"title":"TAVIS CHAMOXRCHOBA"
"description":"SIKVDILI MINDA"
"ticketQuantity":50
"startTime":"2023-03-17T14:09:22.547"
"endTime":"2023-03-17T14:09:22.547"
"isAccepted":false}]


2023-03-17 22:28:46.418 +04:00 [INF] 
-------------------------------------------------
JWTtoken = 
IP = ::1
Time = 3/17/2023 10:28:46 PM
Address = https
Path = /api/Admin/9
IsSecured = True
RequestBody = 

2023-03-17 22:28:50.176 +04:00 [INF] -RESPONSE:
Time = 3/17/2023 10:28:50 PM
ResponseBody = 
{"title":"Test1"
"description":"idk idk idk idk"
"ticketQuantity":30
"startTime":"2023-02-22T11:15:41.837"
"endTime":"2023-02-22T14:15:41.837"
"isAccepted":true}


